import os
import base64
import requests
from concurrent.futures import ThreadPoolExecutor
from typing import Union, Literal, List, Tuple
from dotenv import load_dotenv
from PIL import Image
from io import BytesIO

# Load environment variables from .env file
load_dotenv()

class ImgurUploader:
    def __init__(self, client_id: str = None, max_retries: int = 3, timeout: int = 10, max_workers: int = 5):
        self.imgur_client_id = client_id or os.getenv("IMGUR_CLIENT_ID")
        if not self.imgur_client_id:
            raise ValueError("Imgur Client-ID not found. Please provide it or set it in the environment variables.")
        
        self.session = requests.Session()
        self.session.headers.update({'Authorization': f'Client-ID {self.imgur_client_id}'})
        self.max_retries = max_retries
        self.timeout = timeout
        self.executor = ThreadPoolExecutor(max_workers=max_workers)

    def _convert_webp_to_jpeg(self, image_data: str) -> str:
        """Convert WebP image to JPEG format"""
        try:
            # Decode base64 to bytes
            image_bytes = base64.b64decode(image_data)
            
            # Open image with PIL
            image = Image.open(BytesIO(image_bytes))
            
            # Convert to RGB (removes transparency)
            if image.mode in ('RGBA', 'LA') or (image.mode == 'P' and 'transparency' in image.info):
                background = Image.new('RGB', image.size, (255, 255, 255))
                if image.mode == 'P':
                    image = image.convert('RGBA')
                background.paste(image, mask=image.split()[3])
                image = background
            else:
                image = image.convert('RGB')
            
            # Save as JPEG to BytesIO
            output_buffer = BytesIO()
            image.save(output_buffer, format='JPEG', quality=95)
            
            # Convert back to base64
            return base64.b64encode(output_buffer.getvalue()).decode()
        except Exception as e:
            print(f"Error converting WebP to JPEG: {e}")
            return image_data

    def upload_media_to_imgur(
        self, media_base64: str, media_type: Literal["image", "video"], 
        title: str = "AI Generated Media", 
        description: str = "This media was generated by an AI model"
    ) -> str:
        """
        Uploads base64-encoded media (image or video) to Imgur using the API.
        """
        if media_type == "image":
            # Try to detect if it's a WebP image
            try:
                image_bytes = base64.b64decode(media_base64)
                img = Image.open(BytesIO(image_bytes))
                if img.format == 'WEBP':
                    media_base64 = self._convert_webp_to_jpeg(media_base64)
            except Exception as e:
                print(f"Error checking image format: {e}")

        payload = {
            'type': 'base64',
            'title': title,
            'description': description,
            'image': media_base64 if media_type == "image" else None,
            'video': media_base64 if media_type == "video" else None
        }

        return self._execute_with_retry("https://api.imgur.com/3/upload", payload)

    def _execute_with_retry(self, url: str, payload: dict) -> str:
        for attempt in range(self.max_retries):
            try:
                response = self.session.post(url, data=payload, timeout=self.timeout)
                response.raise_for_status()
                result = response.json()
                if result.get('success', False):
                    return result.get('data', {}).get('link', "https://i.ibb.co/wWFYPtQ/no-image.png")
                else:
                    print(f"Upload failed: {result.get('data', {}).get('error', 'Unknown error')}")
            except requests.exceptions.RequestException as e:
                print(f"Attempt {attempt + 1} failed: {str(e)}")
            if attempt == self.max_retries - 1:
                print(f"Upload failed after {self.max_retries} attempts.")
                return "https://i.ibb.co/wWFYPtQ/no-image.png"
            print(f"Retrying... ({attempt + 2}/{self.max_retries})")

    def upload_multiple(self, media_list: List[Tuple[str, Literal["image", "video"], str, str]]) -> List[str]:
        """
        Uploads multiple media items to Imgur concurrently.
        """
        futures = [
            self.executor.submit(self.upload_media_to_imgur, media, media_type, title, description)
            for media, media_type, title, description in media_list
        ]
        return [future.result() for future in futures]

    def __del__(self):
        self.session.close()
        self.executor.shutdown(wait=False)

# Example usage
if __name__ == "__main__":
    uploader = ImgurUploader()
    
    # Example with a base64-encoded image
    with open("uploads/example_image.webp", "rb") as image_file:
        image_base64 = base64.b64encode(image_file.read()).decode()
    
    image_url = uploader.upload_media_to_imgur(image_base64, "image", "Test Image", "This is a test image")
    print(f"Uploaded image URL: {image_url}")